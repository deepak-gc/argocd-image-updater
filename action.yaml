name: 'Image tag updater - ArgoCD staging auto deployment'
description: 'Action to update image TAG in all deploy/overlays/staging/**/image.yaml e.g. gcr.io/platform-abc/consumer:TAG'
inputs:
  image-tag:
    description: 'Image tag'
    default: ${{ github.sha }}
    required: false
  update-deployment-list:
    description: 'List of deployments where image tag should be updated, by default `**` to udpate all deployments'
    default: |
      **
    required: false
  deployment-path: 
    description: 'List of deployments where image tag should be updated, by default `**` to udpate all deployments'
    required: false
    default: "./deploy/overlays/staging"
  gcr-platform:
    description: 'GCR platform name e.g. platform-staging, platform-production'
    required: false
    default: 'gcr.io/platform-staging-200307/'
  token:
    description: 'GiHub token with permission to write in protective branches'
    required: true
  branch-name:
    description: 'Name of the branch for which this workflow will run, valid values are: dev | staging | main | master'
    required: false
    default: 'dev'
runs:
  using: 'composite'
  steps:
    - name: Validate
      run: |
        BRANCH_NAME="${{ inputs.branch-name }}"
        UPDATE_ERROR=false
        if [[ "$BRANCH_NAME" != "dev" && "$BRANCH_NAME" != "staging" && "$BRANCH_NAME" != "master" && "$BRANCH_NAME" != "main" ]]; then
          printf "\n **Auto deployment failed** \n Invalid branch name: $BRANCH_NAME \n Only one of the following branches are vaild: [ staging | dev | master | main ]\n\n"
          exit 1
        fi

        REF_NAME="${{ github.ref_name}}"
        if [[ "$BRANCH_NAME" != "$REF_NAME" ]]; then
          printf "\n Auto deployment will not run for current '$REF_NAME' branch as it's cofigured to run for '$BRANCH_NAME' branch only.\n"
          UPDATE_ERROR=true
          exit 0
        fi
        echo "UPDATE_ERROR=$UPDATE_ERROR" >> $GITHUB_ENV
      shell: bash
    - name: Update image tag
      if: env.UPDATE_ERROR == 'false'
      env:
        UPDATE_DEPLOYMENT_LIST: ${{ inputs.update-deployment-list }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        DEPLOYMENT_PATH: ${{ inputs.deployment-path }}
        GCR_PLATFORM: ${{ inputs.gcr-platform }}
        UPDATED_TAG: false
        BRANCH_NAME: ${{ inputs.branch-name }}
      run: |
        if [[ -n "$UPDATE_DEPLOYMENT_LIST" ]]; then
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then 
               IMAGE_FILE="$DEPLOYMENT_PATH/$line/image.yaml"   
               if [ "$line" != "**" ] && [ ! -f "$IMAGE_FILE" ]; then
                  echo "Error: Failed to update $IMAGE_FILE, file doesn't exists."
                  continue
               fi
              echo "Updating $IMAGE_FILE"
              echo "Previous TAG:"
              cat $IMAGE_FILE | grep "image:" 
              
              sed -ri "s~image: (${{env.GCR_PLATFORM}}.*):(.*)~image: \1:${{env.IMAGE_TAG}}~g" $IMAGE_FILE

              echo "New TAG:"
              cat $IMAGE_FILE | grep "image:"
              echo " "
            fi            
          done <<< "$UPDATE_DEPLOYMENT_LIST"
          
          if [[ ! -z $(git status -s) ]]; then   
            echo "UPDATED_TAG=true" >> $GITHUB_ENV
          else
            echo "There was no change in image tag"
          fi
    
        fi
      shell: bash
    - name: Commit image update changes
      if: env.UPDATED_TAG == 'true'
      run: |
        mv .git/config .git/config.temp
        git config --global user.name 'argocd-image-updater'
        git config --global user.email 'argocd-image-updater@users.noreply.github.com'
        git remote add origin https://github.com/${{ github.repository }}
        git config --global push.default current
        git remote set-url origin https://${{ inputs.token }}@github.com/${{ github.repository }}
        git commit -am "build: automatic update of argocd deployment" -m "updated image tag to '${{ inputs.image-tag }}' [skip actions]"
        git push
        echo "COMMIT_ID=$(git rev-parse --verify HEAD)" >> $GITHUB_ENV
        mv .git/config.temp .git/config
      shell: bash
#    - name: Commit status success
#      if: ${{ (env.UPDATE_ERROR == 'false') && success() }}
#      run: |
#        curl --silent --request POST \
#        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.COMMIT_ID }} \
#        --header 'authorization: Bearer ${{ inputs.token }}' \
#        --header 'content-type: application/json' \
#        --data '{
#          "context": "ArgoCD image updated",
#          "state": "success",
#          "description": "ArgoCD image updater passed",
#          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#        }' &> /dev/null
#      shell: bash
#    - name: Commit status failure
#      if: ${{ (env.UPDATE_ERROR == 'false') && failure() }}
#      run: |
#        curl --silent --request POST \
#        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ env.COMMIT_ID }} \
#        --header 'authorization: Bearer ${{ inputs.token }}' \
#        --header 'content-type: application/json' \
#        --data '{
#          "context": "ArgoCD image updater failed",
#          "state": "failure",
#          "description": "ArgoCD image updater failed",
#          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
#        }' &> /dev/null
#      shell: bash
